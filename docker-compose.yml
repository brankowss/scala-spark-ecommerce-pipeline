services:
  # --- HDFS Cluster: The Data Lake ---
  # HDFS serves as the primary storage for raw and staged data.
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    volumes:
      - hadoop_namenode_data:/hadoop/dfs/name # Persists HDFS metadata
      - ./generated_data:/tmp/data_in         # Mounts local data generator output for ingestion
    env_file:
      - ./hadoop-hive.env
    environment:
      - CLUSTER_NAME=test
    ports:
      - "9870:9870" # HDFS NameNode Web UI
      - "9000:9000" # HDFS RPC Port
    networks:
      - data-pipeline-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode_data:/hadoop/dfs/data # Persists HDFS data blocks
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"  # Waits for NameNode UI to be up
    networks:
      - data-pipeline-network

  # --- Hive Ecosystem: The Staging Layer ---
  # Hive provides a SQL-like interface over the files stored in HDFS.
  hive-metastore-db:
    image: postgres:13-alpine
    container_name: hive-metastore-db
    volumes:
      - hive_metastore_db_data:/var/lib/postgresql/data # Persists the Hive metadata
    environment:
      - POSTGRES_DB=metastore
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
    networks:
      - data-pipeline-network
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    depends_on:
      - hive-metastore-db
      - namenode
    env_file:
      - ./hadoop-hive.env    # Loads all Hive configurations from an external file
    command: /opt/hive/bin/hive --service metastore    # Runs this service as a Metastore
    networks:
      - data-pipeline-network

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    depends_on:
      - hive-metastore
    env_file:
      - ./hadoop-hive.env
    ports:
      - "10000:10000"  # Exposes the JDBC port for clients like Spark
    networks:
      - data-pipeline-network

# --- Spark Cluster: The Processing Engine ---
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: my-scala-spark-image:latest
    container_name: spark-master
    env_file:
      - ./hadoop-hive.env
    environment:
      - SPARK_MODE=master
      # Pass PostgreSQL credentials to the Spark driver
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "8081:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master RPC Port
    volumes: 
      - ./spark-apps:/opt/bitnami/spark/apps
    networks:
      - data-pipeline-network

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: my-scala-spark-image:latest
    container_name: spark-worker
    depends_on:
      - spark-master
    env_file:
      - ./hadoop-hive.env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      # Pass PostgreSQL credentials to the Spark executors
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
    networks:
      - data-pipeline-network
  
   # --- Data Warehouse & BI Layer ---
  postgres-warehouse:
    image: postgres:13-alpine
    container_name: postgres-warehouse
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data_p2:/var/lib/postgresql/data  # Persists the final DWH tables
    networks:
      - data-pipeline-network
      
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    depends_on:
      - postgres-warehouse
    volumes: 
      - metabase_data_p2:/var/lib/postgresql/data  # Persists Metabase application data
    networks:
      - data-pipeline-network

  # --- Orchestration ---
  jenkins:
    image: jenkins/jenkins:lts-jdk11
    container_name: jenkins
    ports:
      - "8080:8080"  # Jenkins Web UI
      - "50000:50000"  # Port for Jenkins agents
    volumes:
      - jenkins_data:/var/jenkins_home  # Persists Jenkins configuration and jobs
    networks:
      - data-pipeline-network

# Named volumes for persistent storage
volumes:
  hadoop_namenode_data:
  hadoop_datanode_data:
  hive_metastore_db_data:
  postgres_data_p2:
  metabase_data_p2:
  jenkins_data:

# A single bridge network for all services to communicate
networks:
  data-pipeline-network:
    driver: bridge