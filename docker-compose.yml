version: '3.8'

services:
  # --- HDFS Cluster: The Data Lake ---
  # HDFS serves as the primary storage for raw and staged data.
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    volumes:
      - hadoop_namenode_data:/hadoop/dfs/name # Persists HDFS metadata
    env_file:
      - ./hadoop-hive.env
    environment:
      - CLUSTER_NAME=test
    ports:
      - "9870:9870" # HDFS NameNode Web UI
      - "9000:9000" # HDFS RPC Port
    networks:
      - data-pipeline-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode_data:/hadoop/dfs/data # Persists HDFS data blocks
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"  # Waits for NameNode UI to be up
    networks:
      - data-pipeline-network

  # --- Hive Ecosystem: The Staging Layer ---
  # Hive provides a SQL-like interface over the files stored in HDFS.
  hive-metastore-db:
    image: postgres:13-alpine
    container_name: hive-metastore-db
    volumes:
      - hive_metastore_db_data:/var/lib/postgresql/data # Persists the Hive metadata
    environment:
      - POSTGRES_DB=metastore
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
    networks:
      - data-pipeline-network
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    depends_on:
      - hive-metastore-db
      - namenode
    env_file:
      - ./hadoop-hive.env    # Loads all Hive configurations from an external file
    command: /opt/hive/bin/hive --service metastore    # Runs this service as a Metastore
    networks:
      - data-pipeline-network

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    depends_on:
      - hive-metastore
    env_file:
      - ./hadoop-hive.env
    ports:
      - "10000:10000"  # Exposes the JDBC port for clients like Spark
    networks:
      - data-pipeline-network

# --- Spark Cluster: The Processing Engine ---
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    command: >
      bash -c "/opt/spark/sbin/start-master.sh && tail -f /dev/null"
    ports:
      - "8081:8080"
      - "7077:7077"
      - "4040:4040"
    volumes:
      - ./spark-apps:/opt/spark/apps
      - ./jars:/opt/spark/jars-custom
      - ./reports:/opt/spark/reports
    networks:
      - data-pipeline-network
    environment:
      - SPARK_MODE=master
      # Pass PostgreSQL credentials to the Spark driver
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      
  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker
    depends_on:
      - spark-master
    command: >
      bash -c "/opt/spark/sbin/start-worker.sh spark://spark-master:7077 && tail -f /dev/null"
    volumes:
      - ./spark-apps:/opt/spark/apps
      - ./jars:/opt/spark/jars-custom
      - ./reports:/opt/spark/reports
    networks:
      - data-pipeline-network
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      # Pass PostgreSQL credentials to the Spark executors
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

   # --- Data Warehouse ---
  postgres-warehouse:
    image: postgres:13-alpine
    container_name: postgres-warehouse
    ports:
      - "5435:5432"
    volumes:
      - postgres_data_p2:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - data-pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Orchestration ---
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins
    user: "root"
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      # Only for testing purpose.
      # - .:/var/jenkins_home/workspace/pipeline-test
    networks:
      - data-pipeline-network
    depends_on:
      - spark-master
    environment:
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
      - JENKINS_SENDER_EMAIL=${JENKINS_SENDER_EMAIL}
      - JENKINS_EMAIL_APP_PASSWORD=${JENKINS_EMAIL_APP_PASSWORD}
      
  # --- Kafka: The Real-time Messaging System ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - data-pipeline-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    networks:
      - data-pipeline-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  # --- Twitter Producer: The Real-time Data Source ---
  twitter-producer:
    build: ./twitter-producer
    container_name: twitter-producer
    command: tail -f /dev/null
    networks:
      - data-pipeline-network
    depends_on:
      - kafka
    environment:
      TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN}

# --- BI Layer ---
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - data-pipeline-network
    depends_on:
      postgres-warehouse:
        condition: service_healthy
    environment:
      MB_DB_TYPE: ${MB_DB_TYPE}
      MB_DB_DBNAME: ${MB_DB_DBNAME}
      MB_DB_PORT: ${MB_DB_PORT}
      MB_DB_USER: ${MB_DB_USER}
      MB_DB_PASS: ${MB_DB_PASS}
      MB_DB_HOST: ${MB_DB_HOST}

# A single bridge network for all services to communicate
networks:
  data-pipeline-network:
    driver: bridge

# Named volumes for persistent storage
volumes:
  hadoop_namenode_data:
  hadoop_datanode_data:
  hive_metastore_db_data:
  postgres_data_p2:
  jenkins_data:

